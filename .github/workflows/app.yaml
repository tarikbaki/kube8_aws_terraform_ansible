name: App CI/CD

on:
  push:
    branches:
      - delivery
#  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: GitHub Action for pylint
      uses: cclauss/GitHub-Action-for-pylint@0.7.0


    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ./app

    # - name: Run tests
    #   run: |
    #     export MYSQL_USERNAME=testuser
    #     export MYSQL_PASSWORD=testpassword
    #     export MYSQL_INSTANCE_NAME=testdb
    #     export MYSQL_PORT_3306_TCP_ADDR=mysql
    #     export MYSQL_PORT_3306_TCP_PORT=3306
    #     python test_app.py
    #   working-directory: ./app

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v3
        with:
          fetch_depth: 1
      - 
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/Dockerfile
          no-fail: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: app
          load: true
          tags: tarikbaki/app:latest
      - 
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/tarikbaki/app:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'      
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: app
          push: true
          tags: tarikbaki/app:latest

  deployment:
    needs: docker
    runs-on: 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v3

    - uses: azure/setup-helm@v3
      with:
        version: '3.8.0'
      id: install
    
    - run: |
        echo ${{ secrets.KUBECONFIG }}|base64 -d > kubeconfig
        helm --kubeconfig kubeconfig upgrade --install app helm -f helm/values-dev.yml -n app

    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        working-directory: e2e